{"version":3,"sources":["utils/API.js","components/SearchResultCard/index.js","pages/Saved/index.js","components/SearchForm/index.js","pages/Search/index.js","components/NavBar/index.js","App.js","registerServiceWorker.js","index.js"],"names":["require","config","query","KEY","axios","get","id","delete","bookData","post","SearchResultCard","props","className","key","title","author","alt","src","image","description","href","link","Saved","state","savedBooks","deleteBook","API","then","console","log","catch","err","res","setState","data","this","map","book","_id","onClick","Component","SearchForm","htmlFor","onChange","handleInputChange","value","search","name","type","placeholder","handleFormSubmit","Search","searchResults","searchForBooks","items","event","target","preventDefault","saveThisBook","authors","result","volumeInfo","imageLinks","thumbnail","saleInfo","buyLink","NavBar","Navbar","bg","variant","Brand","Nav","Link","App","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5c534aa8.chunk.js","sourcesContent":["import axios from \"axios\";\r\n// Enable access to .env variables\r\nrequire('dotenv').config();\r\n\r\nexport default {\r\n  // search google books\r\n  searchBooks: function(query, KEY) {\r\n    return axios.get(\"https://www.googleapis.com/books/v1/volumes?q=$\" + query + \"&\" + KEY);\r\n    //\"https://www.googleapis.com/books/v1/volumes?q=coding&key=AIzaSyBc7aFFzPmgNSKTaKVlFb6HnsTqWarJktc\"\r\n  },\r\n  // Gets all books\r\n  getBooks: function() {\r\n    return axios.get(\"/api/books\");\r\n  },\r\n  // Gets the book with the given id\r\n  getBook: function(id) {\r\n    return axios.get(\"/api/books/\" + id);\r\n  },\r\n  // Deletes the book with the given id\r\n  deleteBook: function(id) {\r\n    return axios.delete(\"/api/books/\" + id);\r\n  },\r\n  // Saves a book to the database\r\n  saveBook: function(bookData) {\r\n    return axios.post(\"/api/books\", bookData);\r\n  }\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction SearchResultCard(props) {\r\n  return (\r\n    <div className=\"card\" key={props.id}>\r\n      <h4>{props.title}</h4>\r\n      <p><strong>By {props.author}</strong></p>\r\n      <img alt={props.title} className=\"book-image\" src={props.image} />\r\n      <p>{props.description}</p>\r\n      <a href={props.link}> Buy Book </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchResultCard;","import React, { Component, useEffect, useState } from \"react\";\r\nimport API from \"../../utils/API\";\r\nimport SearchResultCard from \"../../components/SearchResultCard\"\r\n\r\nclass Saved extends Component {\r\n  state = {\r\n    savedBooks: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    API.getBooks()\r\n    .then((res) => {\r\n      this.setState({ savedBooks: res.data})\r\n      console.log(res)\r\n      console.log(this.state.savedBooks)\r\n    })\r\n    .catch(err => console.log(err));\r\n  };\r\n\r\n  deleteBook = id => {\r\n    API.deleteBook(id)\r\n    .then(console.log(\"book deleted\"))\r\n    .catch(err => console.log(err));\r\n\r\n    API.getBooks()\r\n    .then((res) => {\r\n      this.setState({ savedBooks: res.data})\r\n      console.log(res)\r\n      console.log(this.state.savedBooks)\r\n    })\r\n    .catch(err => console.log(err));\r\n\r\n  };\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n              <div className=\"hero\">\r\n                  <h1>All Books From Mongo DB</h1>\r\n              </div>\r\n\r\n              {/* {this.state.savedBooks.length ? ( */}\r\n\r\n              <div className=\"cardDeck\">\r\n              {this.state.savedBooks.map(book => (\r\n                <div key={book._id}>\r\n                  <SearchResultCard  \r\n                    id={book._id}\r\n                    title={book.title}\r\n                    author={book.author}\r\n                    description={book.description}\r\n                    image={book.image}\r\n                    link={book.link}\r\n            // add additional properties to display here\r\n                  />\r\n                  <button onClick={() => this.deleteBook(book._id)}>Remove</button>\r\n                </div>\r\n              ))}\r\n          </div>\r\n              {/* {this.state.savedBooks.map(book => {\r\n                  \r\n                    <div className=\"card\" key={book._id}>\r\n                      <h4>\r\n                        {book.title} by {book.author}\r\n                      </h4>\r\n                      <li>\r\n                        {book.description}\r\n                      </li>\r\n                      <li>\r\n                        image:\r\n                        {book.image}\r\n                      </li>\r\n                      <li>\r\n                        {book.link}\r\n                      </li>\r\n                      <div className=\"cardFooter\">\r\n                        <button onClick={() => this.deleteBook(book._id)}>Remove</button>\r\n                      </div>\r\n                    </div>\r\n                \r\n              })} */}\r\n              \r\n               {/* ) : (\r\n               <h3>No Results to Display</h3>\r\n             )} */}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n};\r\n\r\n\r\n\r\n// function Saved() {\r\n\r\n//     const [books, setBooks] = useState([])\r\n  \r\n//     // Load all books and store them with setBooks\r\n//     useEffect(() => {\r\n//       loadBooks()\r\n//     }, [])\r\n  \r\n//     // Loads all books and sets them to books\r\n//     function loadBooks() {\r\n//       API.getBooks()\r\n//         .then(res => \r\n//           setBooks(res.data)\r\n//         )\r\n//         .catch(err => console.log(err));\r\n//     };\r\n\r\n//     // Deletes a book from the database with a given id, then reloads books from the db\r\n//     function deleteBook(id) {\r\n//       API.deleteBook(id)\r\n//         .then(res => loadBooks())\r\n//         .catch(err => console.log(err));\r\n//     }\r\n  \r\n//     return (\r\n//       <div className=\"container-fluid\">\r\n//           <div className=\"row\">\r\n//               <div className=\"hero\">\r\n//                   <h1>All Books From Mongo DB</h1>\r\n//               </div>\r\n\r\n//               {books.length ? (\r\n\r\n//               <div className=\"cardDeck\">\r\n//               {books.map(book => {\r\n//                   return (\r\n//                     <div className=\"card\" key={book._id}>\r\n//                       <h4>\r\n//                         {book.title} by {book.author}\r\n//                       </h4>\r\n//                       <li>\r\n//                         {book.description}\r\n//                       </li>\r\n//                       <li>\r\n//                         image:\r\n//                         {book.image}\r\n//                       </li>\r\n//                       <li>\r\n//                         {book.link}\r\n//                       </li>\r\n//                       <div className=\"cardFooter\">\r\n//                         <button onClick={() => deleteBook(book._id)}>Remove</button>\r\n//                       </div>\r\n//                     </div>\r\n//                   );\r\n//               })}\r\n//               </div>\r\n//               ) : (\r\n//               <h3>No Results to Display</h3>\r\n//             )}\r\n//         </div>\r\n//       </div>\r\n//     );   \r\n// };\r\n\r\nexport default Saved;","import React from \"react\";\r\n\r\nfunction SearchForm(props) {\r\n  return (\r\n    <form>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"search\">Search:</label>\r\n        <input\r\n          onChange={props.handleInputChange}\r\n          value={props.search}\r\n          name=\"search\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Search for a Gif\"\r\n          id=\"search\"\r\n        />\r\n        <button onClick={props.handleFormSubmit} className=\"btn btn-primary mt-3\">\r\n          Search\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SearchForm;","import React, { Component, useEffect, useState } from \"react\";\r\nimport API from \"../../utils/API.js\";\r\nimport SearchForm from \"../../components/SearchForm\"\r\nimport SearchResultCard from \"../../components/SearchResultCard\"\r\n\r\nclass Search extends Component {\r\n  \r\n  state = {\r\n    searchResults: [],\r\n    search: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    // When this component mounts, search the Google Books API for ...\r\n    this.searchForBooks(\"zebras\");\r\n  };\r\n\r\n  searchForBooks = query => {\r\n    API.searchBooks(query)\r\n      .then((res) => {\r\n        this.setState({ searchResults: res.data.items })\r\n        console.log(res)\r\n        console.log(this.state.searchResults)\r\n      })\r\n      .catch(err => console.log(err));\r\n      };\r\n\r\n  // Handles updating component state when the user types into the input field\r\n  handleInputChange = event => {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n      this.setState({\r\n        [name]: value\r\n      });\r\n  };\r\n\r\n  // When the form is submitted, search the Giphy API for `this.state.search`\r\n  handleFormSubmit = event => {\r\n    event.preventDefault();\r\n    this.searchForBooks(this.state.search);\r\n  };\r\n    \r\n\r\n\r\n  saveThisBook = () => {\r\n    \r\n      const bookData = {\r\n        title: this.title,\r\n        author: this.authors,\r\n        description: this.description,\r\n        image: this.image,\r\n        link: this.link,\r\n      }\r\n    \r\n    API.saveBook(bookData)\r\n    .then(\r\n      console.log(bookData)\r\n    )\r\n    .catch(err => console.log(err));\r\n      \r\n    \r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SearchForm\r\n          search={this.state.search}\r\n          handleFormSubmit={this.handleFormSubmit}\r\n          handleInputChange={this.handleInputChange}\r\n        />\r\n           \r\n        {this.state.searchResults.map(result => (\r\n        <div key={result.id}>\r\n          <SearchResultCard  \r\n            id={result.id}\r\n            title={result.volumeInfo.title}\r\n            author={result.volumeInfo.authors}\r\n            description={result.volumeInfo.description}\r\n            image={result.volumeInfo.imageLinks.thumbnail}\r\n            link={result.saleInfo.buyLink}\r\n            // add additional properties to display here\r\n          />\r\n          <button onClick={() => this.saveThisBook()}>Save Book</button>\r\n        </div>\r\n        ))} \r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Search;","import React from \"react\";\r\nimport { Navbar } from 'react-bootstrap';\r\nimport { Nav } from 'react-bootstrap';\r\n// import { Brand } from 'react-bootstrap';\r\n// import { Link } from 'react-bootstrap';\r\n// import { Form } from 'react-bootstrap';\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Brand href=\"/\">Book IT</Navbar.Brand>\r\n      <Nav className=\"mr-auto\">\r\n        <Nav.Link href=\"/\">Home/Search</Nav.Link>\r\n        <Nav.Link href=\"/saved\">Saved</Nav.Link>\r\n      </Nav>\r\n      {/* <Form inline>\r\n        <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n        <Button variant=\"outline-info\">Search</Button>\r\n      </Form> */}\r\n    </Navbar>\r\n    \r\n  );\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\n//, { Component }\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport SavedPage from \"./pages/Saved\";\nimport SearchPage from \"./pages/Search\";\nimport NavBar from \"./components/NavBar\";\nimport \"./App.css\";\n\n//import logo from \"./logo.svg\";\n//import SavedPage from \"../src/pages/Saved\"\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <NavBar />\n        <Switch>\n          <Route exact path={[\"/\", \"/search\"]}>\n            <SearchPage />\n          </Route>\n          <Route exact path=\"/saved\">\n            <SavedPage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\nexport default App;\n\n// <div className=\"App\">\n    //   <div className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <h2>Welcome to React</h2>\n    //   </div>\n    //   <p className=\"App-intro\">\n    //     To get started, edit <code>src/App.js\n    //       <SavedPage />\n    //       </code> and save to reload.\n    //   </p>\n    // </div>\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}