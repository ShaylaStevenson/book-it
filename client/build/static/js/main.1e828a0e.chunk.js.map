{"version":3,"sources":["utils/API.js","pages/Saved/index.js","pages/Search/index.js","components/NavBar/index.js","App.js","registerServiceWorker.js","index.js"],"names":["axios","get","Saved","useState","books","setBooks","useEffect","API","then","res","data","catch","err","console","log","className","length","map","book","key","_id","title","author","description","image","link","Search","NavBar","Navbar","bg","variant","Brand","href","Nav","Link","App","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"mRAEe,EAEH,WACR,OAAOA,IAAMC,IAAI,eCsDNC,MAxDf,WAEI,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAbAC,qBAAU,WAMRC,IACGC,MAAK,SAAAC,GAAG,OACPJ,EAASI,EAAIC,SAEdC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAR3B,IAYD,yBAAKG,UAAU,mBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,QACX,wDAGHX,EAAMY,OAEP,yBAAKD,UAAU,YACdX,EAAMa,KAAI,SAAAC,GACP,OACE,yBAAKH,UAAU,OAAOI,IAAKD,EAAKE,KAC9B,4BACGF,EAAKG,MADR,OACmBH,EAAKI,QAExB,4BACGJ,EAAKK,aAER,qCAEGL,EAAKM,OAER,4BACGN,EAAKO,WAOhB,wDC3CCC,MANf,WACI,OACI,4C,gBCmBOC,MAjBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,WACA,kBAACC,EAAA,EAAD,CAAKlB,UAAU,WACb,kBAACkB,EAAA,EAAIC,KAAL,CAAUF,KAAK,KAAf,eACA,kBAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,UAAf,Y,MCiBOG,MAnBf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,CAAC,IAAK,YACvB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,UAChB,kBAAC,EAAD,WCXNC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTrC,MAAK,SAAAyC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,WAK1B1C,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBH,OAAM,SAAA6C,GACL3C,QAAQ2C,MAAM,4CAA6CA,M,MC/DjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIe,IAAIC,GAAwBtB,OAAOC,UAC3CsB,SAAWvB,OAAOC,SAASsB,OAIvC,OAGFvB,OAAOwB,iBAAiB,QAAQ,WAC9B,IAAMnB,EAAK,UAAMiB,GAAN,sBAENxB,EAwCX,SAAiCO,GAE/BoB,MAAMpB,GACHrC,MAAK,SAAA0D,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQnE,IAAI,gBAAgBoE,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAM9D,MAAK,SAAAyC,GACjCA,EAAasB,aAAa/D,MAAK,WAC7BgC,OAAOC,SAAS+B,eAKpB5B,EAAgBC,MAGnBlC,OAAM,WACLE,QAAQC,IACN,oEAzDA2D,CAAwB5B,GAHxBD,EAAgBC,OC5BxB6B,K","file":"static/js/main.1e828a0e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all books\r\n  getBooks: function() {\r\n    return axios.get(\"/api/books\");\r\n  },\r\n  // Saves a book to the database\r\n  saveBook: function(bookData) {\r\n    return axios.post(\"/api/books\", bookData);\r\n  }\r\n};\r\n\r\n// Gets the book with the given id\r\n//   getBook: function(id) {\r\n//     return axios.get(\"/api/books/\" + id);\r\n//   },\r\n\r\n// Deletes the book with the given id\r\n//   deleteBook: function(id) {\r\n//     return axios.delete(\"/api/books/\" + id);\r\n//   },\r\n","import React, { useEffect, useState } from \"react\";\r\nimport API from \"../../utils/API\";\r\n\r\nfunction Saved() {\r\n\r\n    const [books, setBooks] = useState([])\r\n  \r\n    // Load all books and store them with setBooks\r\n    useEffect(() => {\r\n      loadBooks()\r\n    }, [])\r\n  \r\n    // Loads all books and sets them to books\r\n    function loadBooks() {\r\n      API.getBooks()\r\n        .then(res => \r\n          setBooks(res.data)\r\n        )\r\n        .catch(err => console.log(err));\r\n    };\r\n  \r\n    return (\r\n      <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n              <div className=\"hero\">\r\n                  <h1>All Books From Mongo DB</h1>\r\n              </div>\r\n\r\n              {books.length ? (\r\n\r\n              <div className=\"cardDeck\">\r\n              {books.map(book => {\r\n                  return (\r\n                    <div className=\"card\" key={book._id}>\r\n                      <h4>\r\n                        {book.title} by {book.author}\r\n                      </h4>\r\n                      <li>\r\n                        {book.description}\r\n                      </li>\r\n                      <li>\r\n                        image:\r\n                        {book.image}\r\n                      </li>\r\n                      <li>\r\n                        {book.link}\r\n                      </li>\r\n                    </div>\r\n                  );\r\n              })}\r\n              </div>\r\n              ) : (\r\n              <h3>No Results to Display</h3>\r\n            )}\r\n        </div>\r\n      </div>\r\n    );   \r\n};\r\n\r\nexport default Saved;","import React, { useEffect, useState } from \"react\";\r\nimport API from \"../../utils/API\";\r\n\r\nfunction Search() {\r\n    return(\r\n        <h1>Search Page</h1>\r\n    )\r\n};\r\n\r\nexport default Search;","import React from \"react\";\r\nimport { Navbar } from 'react-bootstrap';\r\nimport { Nav } from 'react-bootstrap';\r\n// import { Brand } from 'react-bootstrap';\r\n// import { Link } from 'react-bootstrap';\r\n// import { Form } from 'react-bootstrap';\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Brand href=\"/\">Book IT</Navbar.Brand>\r\n      <Nav className=\"mr-auto\">\r\n        <Nav.Link href=\"/\">Home/Search</Nav.Link>\r\n        <Nav.Link href=\"/saved\">Saved</Nav.Link>\r\n      </Nav>\r\n      {/* <Form inline>\r\n        <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n        <Button variant=\"outline-info\">Search</Button>\r\n      </Form> */}\r\n    </Navbar>\r\n    \r\n  );\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\n//, { Component }\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport SavedPage from \"./pages/Saved\";\nimport SearchPage from \"./pages/Search\";\nimport NavBar from \"./components/NavBar\";\nimport \"./App.css\";\n\n//import logo from \"./logo.svg\";\n//import SavedPage from \"../src/pages/Saved\"\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <NavBar />\n        <Switch>\n          <Route exact path={[\"/\", \"/search\"]}>\n            <SearchPage />\n          </Route>\n          <Route exact path=\"/saved\">\n            <SavedPage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\nexport default App;\n\n// <div className=\"App\">\n    //   <div className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <h2>Welcome to React</h2>\n    //   </div>\n    //   <p className=\"App-intro\">\n    //     To get started, edit <code>src/App.js\n    //       <SavedPage />\n    //       </code> and save to reload.\n    //   </p>\n    // </div>\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}